#!/usr/bin/perl

# ====================================================================
# Stochastic_AL.pl
# Author: Adam Wills
# Date: Jul 2015
# Copyright: Carleton University

# INPUT USE:
# filename.pl [house type numbers seperated by "/"] [region numbers seperated by "/"; 0 means all] [set_name]

# DESCRIPTION:
# This script adds roof mounted PV modules to an existing set of houses generated by the CHREM



# The script reads a set of input files:
# 1) CSDDRD type and region database (csv)
# 2) esp-r file templates (template.xxx)
# 3) weather station cross reference list

# The script copies the template files for each house of the CSDDRD and replaces
# and inserts within the templates based on the values of the CSDDRD house. Each 
# template file is explicitly dealt with in the main code (actually a sub) and 
# utilizes insert and replace subroutines to administer the specific house 
# information.

# The script is easily extendable to addtional CSDDRD files and template files.
# Care must be taken that the appropriate lines of the template file are defined 
# and that any required changes in other template files are completed.

# ===================================================================

# --------------------------------------------------------------------
# Declare modules which are used
# --------------------------------------------------------------------

use warnings;
use strict;

use Data::Dumper;	# to dump info to the terminal for debugging purposes
use XML::Simple; # to parse the XML results files
use XML::Dumper;

use lib qw(./modules);
use General;
use AL_Profile_Gen;

# --------------------------------------------------------------------
# Declare the global variables
# --------------------------------------------------------------------

my $hse_types;	# declare an hash array to store the house types to be modeled (e.g. 1 -> 1-SD)
my $regions;	# declare an hash array to store the regions to be modeled (e.g. 1 -> 1-AT)
my $set_name;   # Read in city name from command line
my $time_step;  # Timestep of set [min]

# --------------------------------------------------------------------
# Read the command line input arguments
# --------------------------------------------------------------------

if (@ARGV == 0 || @ARGV == 3) {die "Three arguments are required: house_types regions set_name timestep\n";};	# check for proper argument count

# Pass the input arguments of desired house types and regions to setup the $hse_types and $regions hash references
($hse_types, $regions, $set_name) = &hse_types_and_regions_and_set_name(shift (@ARGV), shift (@ARGV), shift (@ARGV));
if (shift (@ARGV) =~ /^([1-6]?[0-9])$/) {$time_step = $1;}
else {die "Simulation time-step must be equal to or between 1 and 60 minutes\n";};

# --------------------------------------------------------------------
# Read in databases
# --------------------------------------------------------------------

# Fridge data
my $ColdPath = '../bcd/Stochastic/Cold_data/fridge_dist.xml';
my $Frid_dist = XMLin($ColdPath);
$ColdPath = '../bcd/Stochastic/Cold_data/fridge_eff.xml';
my $Frid_eff = XMLin($ColdPath);

# Freezer data
$ColdPath = '../bcd/Stochastic/Cold_data/freezer_dist.xml';
my $Frz_dist = XMLin($ColdPath);
$ColdPath = '../bcd/Stochastic/Cold_data/freezer_eff.xml';
my $Frz_eff = XMLin($ColdPath);




my $Cold_ref = &setColdProfile('AT',517,'Primary',$time_step,$Frz_dist,$Frz_eff);
my @ColdProf = @$Cold_ref;

open(my $fh, '>', 'report.csv');
foreach my $item (@ColdProf) {
    print $fh "$item,\n";
};
close $fh;
