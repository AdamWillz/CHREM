#!/usr/bin/perl

# ====================================================================
# CREST_AL.pl
# Author: Adam Wills
# Date: Jul 2015
# Copyright: Carleton University

# INPUT USE:
# filename.pl [house type numbers seperated by "/"] [region numbers seperated by "/"; 0 means all] [set_name]

# DESCRIPTION:
# This script adds roof mounted PV modules to an existing set of houses generated by the CHREM



# The script reads a set of input files:
# 1) CSDDRD type and region database (csv)
# 2) esp-r file templates (template.xxx)
# 3) weather station cross reference list

# The script copies the template files for each house of the CSDDRD and replaces
# and inserts within the templates based on the values of the CSDDRD house. Each 
# template file is explicitly dealt with in the main code (actually a sub) and 
# utilizes insert and replace subroutines to administer the specific house 
# information.

# The script is easily extendable to addtional CSDDRD files and template files.
# Care must be taken that the appropriate lines of the template file are defined 
# and that any required changes in other template files are completed.

# ===================================================================

# --------------------------------------------------------------------
# Declare modules which are used
# --------------------------------------------------------------------

use warnings;
use strict;

use Data::Dumper;	# to dump info to the terminal for debugging purposes
use File::Copy;
use Storable  qw(dclone);
use XML::Simple; # to parse the XML results files
use XML::Dumper;

use lib qw(../../scripts/modules);
use General;
use Cross_reference;
use AL_Profile_Gen;

# --------------------------------------------------------------------
# Declare the global variables
# --------------------------------------------------------------------

my $hse_types;	# declare an hash array to store the house types to be modeled (e.g. 1 -> 1-SD)
my $regions;	# declare an hash array to store the regions to be modeled (e.g. 1 -> 1-AT)
my $hse_type;
my $region;
my $Target;     # Target average annual lighting consumption for region and hse_type [kWh/yr/hsehld]
my $fCalibrationScalar; # Calibration scalar [-]
my $calibration='LightCalibrate.xml';   # Calibration data input
my $Results;    # HASH to hold calibration results
my $TrueError;  # Relative value for true error [%]
my $return; # HASH to store issues
my $kWhAverage; 
my @AggAnnual=(); # Aggregated annual consumptions [kWh/yr/hsehld]

# --------------------------------------------------------------------
# Read the command line input arguments
# --------------------------------------------------------------------

if (@ARGV < 4) {die "Four arguments are required: house_type region Target scalar_calibration\n";};	# check for proper argument count

# Pass the input arguments of desired house types and regions to setup the $hse_types and $regions hash references
($hse_types, $regions) = &hse_types_and_regions_and_set_name(shift(@ARGV), shift(@ARGV));
my $Num_Keys = keys $hse_types;
if($Num_Keys>1) {die "This script can only handle one house type at a time"};
foreach my $stuff (keys (%{$hse_types})) {
    $hse_type = $hse_types->{$stuff};
};
    
$Num_Keys = keys $regions;
if($Num_Keys>1) {die "This script can only handle one region at a time"};
foreach my $stuff (keys (%{$regions})) {
    $region = $regions->{$stuff};
};

$Target = shift (@ARGV);
if ($Target <=0) {die "Invalid energy consumption target $Target. Must be positive"};

$fCalibrationScalar = shift (@ARGV);
if ($fCalibrationScalar <=0) {die "Invalid calibration scalar $fCalibrationScalar. Must be positive"};

# --------------------------------------------------------------------
# Load in CHREM NN data
# --------------------------------------------------------------------
my $NNinPath = '../../NN/NN_model/ALC-Inputs-V2.csv';
my $NNinput = &cross_ref_readin($NNinPath);
my $NNresPath = '../../NN/NN_model/ALC-Results.csv';
my $NNoutput = &cross_ref_readin($NNresPath);

# --------------------------------------------------------------------
# Load in CREST Databases
# --------------------------------------------------------------------
print "Reading in the occupant start state XML - ";
my $OccSTART = 'occ_start_states.xml';
my $occ_strt = XMLin($OccSTART);
print "Complete\n";

print "Reading in the light simulation parameters XML - ";
my $LIGHT = 'lightsim_inputs.xml';
my $light_sim = XMLin($LIGHT);
print "Complete\n";

# -----------------------------------------------
# Read in the CWEC weather data crosslisting
# -----------------------------------------------
my $climate_ref = &cross_ref_readin('../../climate/Weather_HOT2XP_to_CWEC.csv');	# create an climate reference crosslisting hash

# --------------------------------------------------------------------
# Main light simulation 
# --------------------------------------------------------------------

MAIN: {
    my $issue = 0; # Issue counter
    my @Occ_keys=qw(one two three four five six);
    my @BTypes=(); # Array to hold all bulb categories
    foreach my $blb (keys (%{$light_sim->{'Types'}})) { # Read an store all bulb categories
        push(@BTypes,$blb);
    };

    # Declare the specific CSDDRD file for this set
    my $record = '../../CSDDRD/2007-10-31_EGHD-HOT2XP_dupl-chk_A-files_region_qual_pref_' . $hse_type . '_subset_' . $region;
    my $exten = '.csv';
    my $LIST; # CSDDRD file handle
    my $CSDDRD; # declare a hash reference to store the CSDDRD data. This will only store one house at a time and the header data

    # --------------------------------------------------------------------
    # Begin processing each house model for the region and house type
    # --------------------------------------------------------------------
    open ($LIST, '<', $record . $exten) or die ("Can't open datafile: $record$exten");	# open readable file
    RECORD: while ($CSDDRD = &one_data_line($LIST, $CSDDRD)) { # Each house in the CSDDRD record
        my $hse_name = $CSDDRD->{'file_name'};
        $hse_name =~ s{\.[^.]+$}{}; # Remove any extensions
        my $hse_occ; # Number of occupants in dwelling
        my @Occ; # Array to hold occupancy 
        
        # --------------------------------------------------------------------
        # Find NN data
        # --------------------------------------------------------------------
        my $NNdata;
        if (exists $NNinput->{'data'}->{"$hse_name.HDF"}) {
            $NNdata = $NNinput->{'data'}->{"$hse_name.HDF"};
        } elsif (exists $NNinput->{'data'}->{"$hse_name.HDF.No-Dryer"}) {
            $NNdata = $NNinput->{'data'}->{"$hse_name.HDF.No-Dryer"};
        } else {
            $issue++;
            $return->{$hse_name}->{"$issue"} = "Error: Couldn't find NN record";
            next RECORD;
        };
    
        my $NNo;
        if (exists $NNoutput->{'data'}->{"$hse_name.HDF"}) {
            $NNo = $NNoutput->{'data'}->{"$hse_name.HDF"};
        } elsif (exists $NNoutput->{'data'}->{"$hse_name.HDF.No-Dryer"}) {
            $NNo = $NNoutput->{'data'}->{"$hse_name.HDF.No-Dryer"};
        } else {
            $issue++;
            $return->{$hse_name}->{"$issue"} = "Error: Couldn't find NN output";
            next RECORD;
        };
        
        # Determine the climate for this house from the Climate Cross Reference
        my $climate = $climate_ref->{'data'}->{$CSDDRD->{'HOT2XP_CITY'}};	# shorten the name for use this house
    
        # --------------------------------------------------------------------
        # Generate the occupancy profiles
        # --------------------------------------------------------------------
        $hse_occ = $NNdata->{'Num_of_Children'}+$NNdata->{'Num_of_Adults'};
        if ($hse_occ>5) {   # WARN THE USER THE NUMBER OF OCCUPANTS EXCEEDS MODEL LIMITS
            $issue++;
            $return->{$hse_name}->{"$issue"} = "Warning: Occupants exceeded 5";
            $hse_occ=5;
        };
        my $IniState = &setStartState($hse_occ,$occ_strt->{'wd'}->{"$Occ_keys[$hse_occ]"}); # TODO: Determine 'we' or 'wd'
        my $Occ_ref = &OccupancySimulation($hse_occ,$IniState,4); # TODO: Determine day of the week
        @Occ = @$Occ_ref;
    
        # --------------------------------------------------------------------
        # Generate Lighting Profile
        # --------------------------------------------------------------------
        # --- Irradiance data
        my $loc = $climate->{'CWEC_FILE'};  # Determine climate for this dwelling
        $loc =~ s{\.[^.]+$}{}; # Remove extension
        $loc = $loc . '.out'; # Name of irradiance file
        my $irradiance = "Global_Horiz/$loc";
        my $Irr_ref = &GetIrradiance($irradiance); # Load the irradiance data
        my @Irr = @$Irr_ref;
    
        # --- Bulb data
        my @fBulbs = (); # Array to hold wattage of each bulb in the dwelling
        my $iBulbs=0; # Number of bulbs/lamps for dwelling 
        my @BulbType = qw(Fluorescent Halogen Incandescent);
        foreach my $bulb (@BulbType) { # Read number of bulbs in dwelling from CHREM NN inputs
            $iBulbs = $iBulbs + $NNdata->{$bulb};
        };
        # Assign wattage for each bulb
        for (my $i=1;$i<=$iBulbs;$i++) { # Each bulb
            my $r1 = rand();
            my $cml=0;
            my $category;
            Category: foreach my $blb (@BTypes) { # Loop through each bulb category
                $cml=$cml+$light_sim->{'Types'}->{$blb}->{'Share'};
                if ($r1<=$cml) {
                    $category=$blb;
                    last Category;
                };
            }; # END Category
    
            # Reset variables
            $r1 = rand();
            $cml=0;
            my $BulbSubC;
            BulbSub: foreach my $blb (keys (%{$light_sim->{'Types'}->{$category}->{'sub'}})) { # Loop through each bulb sub-category
                $cml=$cml+$light_sim->{'Types'}->{$category}->{'sub'}->{$blb}->{'Share'};
                if ($r1<=$cml) {
                    $BulbSubC=$blb;
                    last BulbSub;
                };
            }; # END BulbSub
            if (not defined($BulbSubC)) {
                print "Category is $category\n";
                print "Random Number is $r1\n";
                print "Cumulative is $cml\n";
                die "Please check the distribution data";
            };
            # Store wattage of this bulb
            push(@fBulbs, $light_sim->{'Types'}->{$category}->{'sub'}->{$BulbSubC}->{'Wattage'});
        };
    
        # --- Call Lighting Simulation
        my $MeanThresh = $light_sim->{'threshold'}->{'mean'};
        my $STDThresh = $light_sim->{'threshold'}->{'std'};
        my ($light_ref,$AnnPow) = &LightingSimulation(\@Occ,\@Irr,\@fBulbs,$fCalibrationScalar,$MeanThresh,$STDThresh);
        my @Light = @$light_ref;
        push(@AggAnnual,$AnnPow);
    
    }; # END RECORD
    close $LIST;

    # --------------------------------------------------------------------
    # determine the average per household
    # --------------------------------------------------------------------
    my $Agg=0;
    my $Nhousehold = scalar @AggAnnual;
    foreach my $load (@AggAnnual) {
        $Agg=$Agg+$load;
    };
    $kWhAverage = $Agg/$Nhousehold;

    # Determine the absolute true error
    $TrueError = abs($Target-$kWhAverage);

};	# END MAIN

POST: {
    my $POST;
    open($POST, '>', "$fCalibrationScalar" . "out") or die ("Can't open datafile: $fCalibrationScalar.out");	# open readable file
    print $POST "True Error = $TrueError\n";
    print $POST "Predicted = $kWhAverage\n";
    print $POST "Scalar = $fCalibrationScalar\n";
    print $POST "Target = $Target";
    close $POST;
};

LOG: {
    my $LOG;
    open($LOG, '>', "$fCalibrationScalar" . "log") or die ("Can't open datafile: $fCalibrationScalar.log");	# open readable file
    foreach my $probhse (keys (%{$return})) {
        foreach my $issewe (keys (%{$return->{$probhse}})) {
            my $msg = $return->{$probhse}->$issewe;
            print $LOG "$msg :: $probhse\n";
        };
    };
    close $LOG;
};
